/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.sam.mines.address.api.controller;

import org.sam.mines.address.api.model.Town;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-13T10:09:19.475127213+01:00[Europe/Paris]")
@Validated
@Tag(name = "town", description = "the town API")
public interface TownApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /town : List all towns
     *
     * @return An array of towns (status code 200)
     */
    @Operation(
        operationId = "callList",
        summary = "List all towns",
        tags = { "town" },
        responses = {
            @ApiResponse(responseCode = "200", description = "An array of towns", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Town.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/town",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Town>> callList(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"postCode\" : \"postCode\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /town : Create a town
     *
     * @param town  (required)
     * @return Null response (status code 201)
     */
    @Operation(
        operationId = "create",
        summary = "Create a town",
        tags = { "town" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Null response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Town.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/town",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Town> create(
        @Parameter(name = "Town", description = "", required = true) @Valid @RequestBody Town town
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"postCode\" : \"postCode\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /town/{id} : Delete a town.
     *
     * @param id  (required)
     * @return Town has been deleted. (status code 204)
     */
    @Operation(
        operationId = "delete",
        summary = "Delete a town.",
        tags = { "town" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Town has been deleted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/town/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<String> delete(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /town/{id} : Info for a specific town
     *
     * @param id The id of the town to retrieve (required)
     * @return Expected response to a valid request (status code 200)
     */
    @Operation(
        operationId = "get",
        summary = "Info for a specific town",
        tags = { "town" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Town.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/town/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Town> get(
        @Parameter(name = "id", description = "The id of the town to retrieve", required = true) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"postCode\" : \"postCode\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /town : Update a town
     *
     * @param town  (required)
     * @return Null response (status code 200)
     */
    @Operation(
        operationId = "update",
        summary = "Update a town",
        tags = { "town" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Null response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Town.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/town",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Town> update(
        @Parameter(name = "Town", description = "", required = true) @Valid @RequestBody Town town
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"postCode\" : \"postCode\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
